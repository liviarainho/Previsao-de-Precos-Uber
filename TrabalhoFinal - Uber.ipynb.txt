{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2aU47ZZvYRFN"
      },
      "source": [
        "<img src=\"https://www.pucsp.br/sites/default/files/download/brasao-PUCSP-assinatura-principal-RGB.png\" alt=\"Logo PUC / ODS\" style=\"width:10%;\">"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Análise de dados e aplicação de técnicas de regressão para a previsão de preços\n",
        "### Desenvolver aplicação que prevê preços de corridas de Uber no Peru  utilizando regressão."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Componentes do Grupo"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "| Nome | \n",
        "| --- | \n",
        "| Ana Clara Rodrigues | \n",
        "| Bernardo Rosa |\n",
        "| Felipe Martins |\n",
        "| Lívia Rainho |\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uotheUzPguSy"
      },
      "source": [
        "## Previsão de Preço com regressão linear\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "18OXlljEbTl8",
        "outputId": "676b533e-5e4f-4cb2-fca0-ef738eea3beb"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Mean Absolute Error: 1431.2599900466862\n",
            "Mean Squared Error: 4008784.5597109036\n",
            "R^2 Score: 0.5210414660955547\n",
            "       Real Price  Predicted Price\n",
            "22020      1908.0      2649.571708\n",
            "19742      6218.0      4324.137076\n",
            "8714      10778.0      8570.790501\n",
            "14008      4663.0      3038.729828\n",
            "20093      1700.0      2425.647540\n",
            "14452      3490.0      3560.108336\n",
            "9660       2625.0      2706.479591\n",
            "18853      2625.0      2831.170692\n",
            "21552      1700.0      2299.719334\n",
            "15511      3921.0      4098.331258\n",
            "                     Feature  Coefficient\n",
            "0        cat__icon_executive  1135.496773\n",
            "1            cat__icon_group  9367.255534\n",
            "2    cat__start_type_delayed  -646.022772\n",
            "3   cat__start_type_reserved   940.526125\n",
            "4            cat__source_Wap  -109.119436\n",
            "5           cat__source_iPad   147.965522\n",
            "6         cat__source_iPhone  -140.152691\n",
            "7            cat__source_web   -19.077298\n",
            "8        remainder__start_at    -4.096547\n",
            "9          remainder__end_at   -38.364484\n",
            "10     remainder__arrived_at     7.876595\n",
            "11       remainder__distance     0.000446\n",
            "12       remainder__duration     0.975858\n",
            "Predicted Price: 2527.8862719143112\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
        "\n",
        "# Carregar o arquivo CSV com separador correto\n",
        "file_path = 'uber_peru_2010.csv'\n",
        "df = pd.read_csv(file_path, delimiter=';')\n",
        "\n",
        "# Remover entradas onde 'end_state' é diferente de 'drop off'\n",
        "df = df[df['end_state'] == 'drop off']\n",
        "\n",
        "# Transformar colunas 'start_at', 'end_at' e 'arrived_at' para apenas a hora\n",
        "df['start_at'] = pd.to_datetime(df['start_at'], dayfirst=True).dt.hour\n",
        "df['end_at'] = pd.to_datetime(df['end_at'], dayfirst=True).dt.hour\n",
        "df['arrived_at'] = pd.to_datetime(df['arrived_at'], dayfirst=True).dt.hour\n",
        "\n",
        "df = df[df['duration'] > 10]\n",
        "df = df[df['distance'] > 50]\n",
        "df = df[df['price'] > 0]\n",
        "\n",
        "\n",
        "columns = ['price', 'icon', 'start_type', 'start_at', 'end_at', 'arrived_at', 'distance', 'duration', 'source']\n",
        "features = ['icon', 'start_type', 'start_at', 'end_at', 'arrived_at', 'distance', 'duration', 'source']\n",
        "df = df[columns]\n",
        "# Remover entradas com valores NaN\n",
        "df = df.dropna()\n",
        "\n",
        "# Selecionar colunas para a regressão\n",
        "X = df[features]\n",
        "y = df['price']\n",
        "\n",
        "\n",
        "# Dividir os dados em treino e teste\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Criar o pré-processador com OneHotEncoder para colunas categóricas\n",
        "categorical_features = ['icon', 'start_type', 'source']\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('cat', OneHotEncoder(drop='first'), categorical_features)],\n",
        "    remainder='passthrough')\n",
        "\n",
        "# Criar e treinar o pipeline com o pré-processador e o modelo de Regressão Linear\n",
        "model = Pipeline(steps=[\n",
        "    ('preprocessor', preprocessor),\n",
        "    ('regressor', LinearRegression())\n",
        "])\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# Fazer previsões\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "# Avaliar o modelo\n",
        "mae = mean_absolute_error(y_test, y_pred)\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "\n",
        "print(f\"Mean Absolute Error: {mae}\")\n",
        "print(f\"Mean Squared Error: {mse}\")\n",
        "print(f\"R^2 Score: {r2}\")\n",
        "\n",
        "# Comparar previsões com valores reais\n",
        "comparison_df = pd.DataFrame({'Real Price': y_test, 'Predicted Price': y_pred})\n",
        "print(comparison_df.head(10))\n",
        "\n",
        "# Obter os pesos (coeficientes) de cada variável\n",
        "coefficients = model.named_steps['regressor'].coef_\n",
        "feature_names = preprocessor.get_feature_names_out()\n",
        "\n",
        "# Combinar os nomes das características com os coeficientes\n",
        "coef_df = pd.DataFrame({'Feature': feature_names, 'Coefficient': coefficients})\n",
        "print(coef_df)\n",
        "\n",
        "# Exemplo de previsão\n",
        "new_trip = pd.DataFrame({\n",
        "    'icon': ['executive'],\n",
        "    'start_type': ['asap'],\n",
        "    'start_at': [14], # Hora de início\n",
        "    'end_at': [15], # Hora de fim\n",
        "    'arrived_at': [15], # Hora de chegada\n",
        "    'distance': [5000], # Distância em metros\n",
        "    'duration': [300], # Duração em segundos\n",
        "    'source': ['iPhone']\n",
        "})\n",
        "\n",
        "predicted_price = model.predict(new_trip)\n",
        "print(f\"Predicted Price: {predicted_price[0]}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pspJXteghCdA"
      },
      "source": [
        "## Previsão de preço com decision tree"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Gv-fI4Xoex4U",
        "outputId": "2ac73bf8-65b8-4876-a636-f780d65f893a"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Mean Absolute Error: 249.34051282051283\n",
            "Mean Squared Error: 826684.9377777778\n",
            "R^2 Score: 0.9012299613757527\n",
            "       Real Price  Predicted Price\n",
            "22020      1908.0           1936.0\n",
            "19742      6218.0           6379.0\n",
            "8714      10778.0          10989.0\n",
            "14008      4663.0           4654.0\n",
            "20093      1700.0           1700.0\n",
            "14452      3490.0           3443.0\n",
            "9660       2625.0           2622.0\n",
            "18853      2625.0           2628.0\n",
            "21552      1700.0           1700.0\n",
            "15511      3921.0           3819.0\n",
            "Predicted Price: 1833.0\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
        "\n",
        "# Carregar o arquivo CSV com separador correto\n",
        "file_path = 'uber_peru_2010.csv'\n",
        "df = pd.read_csv(file_path, delimiter=';')\n",
        "\n",
        "# Remover entradas onde 'end_state' é diferente de 'drop off'\n",
        "df = df[df['end_state'] == 'drop off']\n",
        "\n",
        "# Transformar colunas 'start_at', 'end_at' e 'arrived_at' para apenas a hora\n",
        "df['start_at'] = pd.to_datetime(df['start_at'], dayfirst=True).dt.hour\n",
        "df['end_at'] = pd.to_datetime(df['end_at'], dayfirst=True).dt.hour\n",
        "df['arrived_at'] = pd.to_datetime(df['arrived_at'], dayfirst=True).dt.hour\n",
        "\n",
        "df = df[df['duration'] > 10]\n",
        "df = df[df['distance'] > 50]\n",
        "df = df[df['price'] > 0]\n",
        "\n",
        "columns = ['price', 'icon', 'start_type', 'start_at', 'end_at', 'arrived_at', 'distance', 'duration', 'source']\n",
        "features = ['icon', 'start_type', 'start_at', 'end_at', 'arrived_at', 'distance', 'duration', 'source']\n",
        "df = df[columns]\n",
        "# Remover entradas com valores NaN\n",
        "df = df.dropna()\n",
        "\n",
        "# Selecionar colunas para a regressão\n",
        "X = df[features]\n",
        "y = df['price']\n",
        "\n",
        "# Dividir os dados em treino e teste\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Criar o pré-processador com OneHotEncoder para colunas categóricas\n",
        "categorical_features = ['icon', 'start_type', 'source']\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('cat', OneHotEncoder(), categorical_features)],\n",
        "    remainder='passthrough')\n",
        "\n",
        "# Criar e treinar o pipeline com o pré-processador e o modelo de árvore de decisão\n",
        "model = Pipeline(steps=[\n",
        "    ('preprocessor', preprocessor),\n",
        "    ('regressor', DecisionTreeRegressor(random_state=42))\n",
        "])\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# Fazer previsões\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "# Avaliar o modelo\n",
        "mae = mean_absolute_error(y_test, y_pred)\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "\n",
        "print(f\"Mean Absolute Error: {mae}\")\n",
        "print(f\"Mean Squared Error: {mse}\")\n",
        "print(f\"R^2 Score: {r2}\")\n",
        "\n",
        "# Comparar previsões com valores reais\n",
        "comparison_df = pd.DataFrame({'Real Price': y_test, 'Predicted Price': y_pred})\n",
        "print(comparison_df.head(10))\n",
        "\n",
        "# Exemplo de previsão\n",
        "new_trip = pd.DataFrame({\n",
        "    'icon': ['executive'],\n",
        "    'start_type': ['asap'],\n",
        "    'start_at': [14], # Hora de início\n",
        "    'end_at': [15], # Hora de fim\n",
        "    'arrived_at': [15], # Hora de chegada\n",
        "    'distance': [5000], # Distância em metros\n",
        "    'duration': [300], # Duração em segundos\n",
        "    'source': ['iPhone']\n",
        "})\n",
        "\n",
        "predicted_price = model.predict(new_trip)\n",
        "print(f\"Predicted Price: {predicted_price[0]}\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VI-qx3zhhHV1"
      },
      "source": [
        "## Previsão de preço com RandomForest"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MZjOAR5Xdnyf",
        "outputId": "88f950b7-9e0c-4197-e60a-176b66eed639"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Mean Absolute Error: 194.42918632478631\n",
            "Mean Squared Error: 505444.4480987691\n",
            "R^2 Score: 0.9396108899778375\n",
            "       Real Price  Predicted Price\n",
            "22020      1908.0          1881.71\n",
            "19742      6218.0          6166.81\n",
            "8714      10778.0          9402.75\n",
            "14008      4663.0          4664.85\n",
            "20093      1700.0          1700.00\n",
            "14452      3490.0          3475.21\n",
            "9660       2625.0          2639.93\n",
            "18853      2625.0          2620.28\n",
            "21552      1700.0          1695.50\n",
            "15511      3921.0          3813.96\n",
            "Predicted Price for Example: 1831.82\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
        "\n",
        "# Carregar o arquivo CSV com separador correto\n",
        "file_path = 'uber_peru_2010.csv'\n",
        "df = pd.read_csv(file_path, delimiter=';')\n",
        "\n",
        "# Remover entradas onde 'end_state' é diferente de 'drop off'\n",
        "df = df[df['end_state'] == 'drop off']\n",
        "\n",
        "# Transformar colunas 'start_at', 'end_at' e 'arrived_at' para apenas a hora\n",
        "df['start_at'] = pd.to_datetime(df['start_at'], dayfirst=True).dt.hour\n",
        "df['end_at'] = pd.to_datetime(df['end_at'], dayfirst=True).dt.hour\n",
        "df['arrived_at'] = pd.to_datetime(df['arrived_at'], dayfirst=True).dt.hour\n",
        "\n",
        "df = df[df['duration'] > 10]\n",
        "df = df[df['distance'] > 50]\n",
        "df = df[df['price'] > 0]\n",
        "\n",
        "columns = ['price', 'icon', 'start_type', 'start_at', 'end_at', 'arrived_at', 'distance', 'duration', 'source']\n",
        "features = ['icon', 'start_type', 'start_at', 'end_at', 'arrived_at', 'distance', 'duration', 'source']\n",
        "df = df[columns]\n",
        "# Remover entradas com valores NaN\n",
        "df = df.dropna()\n",
        "\n",
        "# Selecionar colunas para a regressão\n",
        "X = df[features]\n",
        "y = df['price']\n",
        "\n",
        "\n",
        "# Dividir os dados em treino e teste\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Criar o pré-processador com OneHotEncoder para colunas categóricas\n",
        "categorical_features = ['icon', 'start_type', 'source']\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('cat', OneHotEncoder(), categorical_features)],\n",
        "    remainder='passthrough')\n",
        "\n",
        "# Criar e treinar o pipeline com o pré-processador e o modelo de Random Forest\n",
        "model = Pipeline(steps=[\n",
        "    ('preprocessor', preprocessor),\n",
        "    ('regressor', RandomForestRegressor(n_estimators=100, random_state=42))\n",
        "])\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# Fazer previsões\n",
        "y_pred = model.predict(X_test)\n",
        "# Avaliar o modelo\n",
        "mae = mean_absolute_error(y_test, y_pred)\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "\n",
        "print(f\"Mean Absolute Error: {mae}\")\n",
        "print(f\"Mean Squared Error: {mse}\")\n",
        "print(f\"R^2 Score: {r2}\")\n",
        "\n",
        "# Comparar previsões com valores reais\n",
        "comparison_df = pd.DataFrame({'Real Price': y_test, 'Predicted Price': y_pred})\n",
        "print(comparison_df.head(10))\n",
        "\n",
        "# Exemplo de previsão\n",
        "new_trip = pd.DataFrame({\n",
        "    'icon': ['executive'],\n",
        "    'start_type': ['asap'],\n",
        "    'start_at': [14], # Hora de início\n",
        "    'end_at': [15], # Hora de fim\n",
        "    'arrived_at': [15], # Hora de chegada\n",
        "    'distance': [5000], # Distância em metros\n",
        "    'duration': [300], # Duração em segundos\n",
        "    'source': ['iPhone']\n",
        "})\n",
        "\n",
        "predicted_price = model.predict(new_trip)\n",
        "print(f\"Predicted Price for Example: {predicted_price[0]}\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nOkXwx13pZnZ"
      },
      "source": [
        "## Previsão de preço com Gradient Boosting"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qq20SBQodQjb",
        "outputId": "3515bc36-3c09-47c7-e159-70dd2b299fce"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Mean Absolute Error: 212.48226761167032\n",
            "Mean Squared Error: 470691.5292170404\n",
            "R^2 Score: 0.9437630729720998\n",
            "       Real Price  Predicted Price\n",
            "22020      1908.0      1842.979400\n",
            "19742      6218.0      6121.825880\n",
            "8714      10778.0      9940.043797\n",
            "14008      4663.0      4633.360884\n",
            "20093      1700.0      1663.962162\n",
            "14452      3490.0      3391.018801\n",
            "9660       2625.0      2576.385409\n",
            "18853      2625.0      2702.045233\n",
            "21552      1700.0      1705.251454\n",
            "15511      3921.0      3732.420367\n",
            "                     Feature  Importance\n",
            "0        cat__icon_executive    0.001832\n",
            "1            cat__icon_group    0.026205\n",
            "2    cat__start_type_delayed    0.000000\n",
            "3   cat__start_type_reserved    0.000300\n",
            "4            cat__source_Wap    0.000000\n",
            "5           cat__source_iPad    0.000000\n",
            "6         cat__source_iPhone    0.000181\n",
            "7            cat__source_web    0.000107\n",
            "8        remainder__start_at    0.001191\n",
            "9          remainder__end_at    0.000737\n",
            "10     remainder__arrived_at    0.001988\n",
            "11       remainder__distance    0.709642\n",
            "12       remainder__duration    0.257818\n",
            "Predicted Price: 1824.605167927009\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import GradientBoostingRegressor\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
        "\n",
        "# Carregar o arquivo CSV com separador correto\n",
        "file_path = 'uber_peru_2010.csv'\n",
        "df = pd.read_csv(file_path, delimiter=';')\n",
        "\n",
        "# Remover entradas onde 'end_state' é diferente de 'drop off'\n",
        "df = df[df['end_state'] == 'drop off']\n",
        "\n",
        "# Transformar colunas 'start_at', 'end_at' e 'arrived_at' para apenas a hora\n",
        "df['start_at'] = pd.to_datetime(df['start_at'], dayfirst=True).dt.hour\n",
        "df['end_at'] = pd.to_datetime(df['end_at'], dayfirst=True).dt.hour\n",
        "df['arrived_at'] = pd.to_datetime(df['arrived_at'], dayfirst=True).dt.hour\n",
        "\n",
        "df = df[df['duration'] > 10]\n",
        "df = df[df['distance'] > 50]\n",
        "df = df[df['price'] > 0]\n",
        "\n",
        "columns = ['price', 'icon', 'start_type', 'start_at', 'end_at', 'arrived_at', 'distance', 'duration', 'source']\n",
        "features = ['icon', 'start_type', 'start_at', 'end_at', 'arrived_at', 'distance', 'duration', 'source']\n",
        "df = df[columns]\n",
        "# Remover entradas com valores NaN\n",
        "df = df.dropna()\n",
        "\n",
        "# Selecionar colunas para a regressão\n",
        "X = df[features]\n",
        "y = df['price']\n",
        "\n",
        "# Dividir os dados em treino e teste\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Criar o pré-processador com OneHotEncoder para colunas categóricas\n",
        "categorical_features = ['icon', 'start_type', 'source']\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('cat', OneHotEncoder(drop='first'), categorical_features)],\n",
        "    remainder='passthrough')\n",
        "\n",
        "# Criar e treinar o pipeline com o pré-processador e o modelo Gradient Boosting\n",
        "model = Pipeline(steps=[\n",
        "    ('preprocessor', preprocessor),\n",
        "    ('regressor', GradientBoostingRegressor())\n",
        "])\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# Fazer previsões\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "# Avaliar o modelo\n",
        "mae = mean_absolute_error(y_test, y_pred)\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "print(f\"Mean Absolute Error: {mae}\")\n",
        "print(f\"Mean Squared Error: {mse}\")\n",
        "print(f\"R^2 Score: {r2}\")\n",
        "\n",
        "# Comparar previsões com valores reais\n",
        "comparison_df = pd.DataFrame({'Real Price': y_test, 'Predicted Price': y_pred})\n",
        "print(comparison_df.head(10))\n",
        "\n",
        "# Obter os pesos (coeficientes) de cada variável\n",
        "feature_importances = model.named_steps['regressor'].feature_importances_\n",
        "feature_names = preprocessor.get_feature_names_out()\n",
        "\n",
        "# Combinar os nomes das características com as importâncias\n",
        "importance_df = pd.DataFrame({'Feature': feature_names, 'Importance': feature_importances})\n",
        "print(importance_df)\n",
        "\n",
        "# Exemplo de previsão\n",
        "new_trip = pd.DataFrame({\n",
        "    'icon': ['executive'],\n",
        "    'start_type': ['asap'],\n",
        "    'start_at': [14], # Hora de início\n",
        "    'end_at': [15], # Hora de fim\n",
        "    'arrived_at': [15], # Hora de chegada\n",
        "    'distance': [5000], # Distância em metros\n",
        "    'duration': [300], # Duração em segundos\n",
        "    'source': ['iPhone']\n",
        "})\n",
        "predicted_price = model.predict(new_trip)\n",
        "print(f\"Predicted Price: {predicted_price[0]}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "Lw4c7nhktqJe",
        "outputId": "78afad61-c46c-46a3-8bda-8e8561cf8dbf"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18666.483699214252,\n        \"min\": 1250.0,\n        \"max\": 55974.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3773.074261487965,\n          2792.0,\n          14624.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"start_at\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5166.264858000508,\n        \"min\": 0.0,\n        \"max\": 14624.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          12.814483041575492,\n          14.0,\n          14624.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"end_at\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5166.395279545392,\n        \"min\": 0.0,\n        \"max\": 14624.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          12.062021334792123,\n          14.0,\n          14624.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"arrived_at\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5166.270847482645,\n        \"min\": 0.0,\n        \"max\": 14624.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          12.683533916849015,\n          14.0,\n          14624.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"distance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4950211.038886855,\n        \"min\": 57.0,\n        \"max\": 14037219.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          13730.9375,\n          7020.0,\n          14624.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"duration\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18481.468692428927,\n        \"min\": 11.0,\n        \"max\": 53163.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          949.0755607221007,\n          476.0,\n          14624.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-70dcaea7-593e-4958-a411-f203352aa50a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>price</th>\n",
              "      <th>start_at</th>\n",
              "      <th>end_at</th>\n",
              "      <th>arrived_at</th>\n",
              "      <th>distance</th>\n",
              "      <th>duration</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>14624.000000</td>\n",
              "      <td>14624.000000</td>\n",
              "      <td>14624.000000</td>\n",
              "      <td>14624.000000</td>\n",
              "      <td>1.462400e+04</td>\n",
              "      <td>14624.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>3773.074261</td>\n",
              "      <td>12.814483</td>\n",
              "      <td>12.062021</td>\n",
              "      <td>12.683534</td>\n",
              "      <td>1.373094e+04</td>\n",
              "      <td>949.075561</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>3115.237689</td>\n",
              "      <td>7.465894</td>\n",
              "      <td>7.635282</td>\n",
              "      <td>7.478147</td>\n",
              "      <td>2.094211e+05</td>\n",
              "      <td>2002.920725</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1250.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>5.700000e+01</td>\n",
              "      <td>11.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>1759.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>4.230000e+03</td>\n",
              "      <td>224.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>2792.000000</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>7.020000e+03</td>\n",
              "      <td>476.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>4593.500000</td>\n",
              "      <td>19.000000</td>\n",
              "      <td>18.000000</td>\n",
              "      <td>19.000000</td>\n",
              "      <td>1.219225e+04</td>\n",
              "      <td>955.250000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>55974.000000</td>\n",
              "      <td>23.000000</td>\n",
              "      <td>23.000000</td>\n",
              "      <td>23.000000</td>\n",
              "      <td>1.403722e+07</td>\n",
              "      <td>53163.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-70dcaea7-593e-4958-a411-f203352aa50a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-70dcaea7-593e-4958-a411-f203352aa50a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-70dcaea7-593e-4958-a411-f203352aa50a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-89151c0a-2744-4203-b657-e9a97cb0fefa\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-89151c0a-2744-4203-b657-e9a97cb0fefa')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-89151c0a-2744-4203-b657-e9a97cb0fefa button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "              price      start_at        end_at    arrived_at      distance  \\\n",
              "count  14624.000000  14624.000000  14624.000000  14624.000000  1.462400e+04   \n",
              "mean    3773.074261     12.814483     12.062021     12.683534  1.373094e+04   \n",
              "std     3115.237689      7.465894      7.635282      7.478147  2.094211e+05   \n",
              "min     1250.000000      0.000000      0.000000      0.000000  5.700000e+01   \n",
              "25%     1759.000000      5.000000      4.000000      5.000000  4.230000e+03   \n",
              "50%     2792.000000     14.000000     14.000000     14.000000  7.020000e+03   \n",
              "75%     4593.500000     19.000000     18.000000     19.000000  1.219225e+04   \n",
              "max    55974.000000     23.000000     23.000000     23.000000  1.403722e+07   \n",
              "\n",
              "           duration  \n",
              "count  14624.000000  \n",
              "mean     949.075561  \n",
              "std     2002.920725  \n",
              "min       11.000000  \n",
              "25%      224.000000  \n",
              "50%      476.000000  \n",
              "75%      955.250000  \n",
              "max    53163.000000  "
            ]
          },
          "execution_count": 76,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.describe()"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
